---
swagger: "2.0"
info:
  x-ibm-name: "goods-and-services"
  title: "Goods and Services"
  version: "2.0.0"
schemes:
- "https"
host: "$(catalog.host)"
basePath: "/goods-and-services"
consumes:
- "application/json"
produces:
- "application/json"
- "application/problem+json"
securityDefinitions:
  oauth:
    type: "oauth2"
    description: ""
    flow: "application"
    scopes: {}
    tokenUrl: "https://$(secure-gateway-destination-oidc)/oidc/accessToken"
    x-tokenIntrospect:
      url: "https://$(secure-gateway-destination-oidc)/oidc/introspect"
      tls-profile: "$(tls-profile-oidc)"
  Client ID:
    type: "apiKey"
    in: "header"
    name: "X-IBM-Client-Id"
  Client Secret:
    type: "apiKey"
    description: ""
    in: "header"
    name: "X-IBM-Client-Secret"
security:
- Client ID: []
  Client Secret: []
  oauth: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
    - activity-log:
        title: "activity-log"
        content: "activity"
        error-content: "payload"
        version: "1.0.0"
    - switch:
        title: "switch"
        case:
        - condition: "(api.operation.id==='getClassificationTranslations')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/classification-translation"
              title: "Get classification translations"
              tls-profile: "$(tls-profile-api)"
        - condition: "(api.operation.id==='validateClassification')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/classification-validation"
              title: "Validate classification"
              tls-profile: "$(tls-profile-api)"
        - condition: "(api.operation.id==='getTaxonomy')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/taxonomy"
              title: "Get taxonomy"
              secure-gateway: false
              tls-profile: "$(tls-profile-api)"
        - condition: "(api.operation.id==='getClassHeadings')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/classHeadings"
              title: "Get class headings"
              tls-profile: "$(tls-profile-api)"
        - condition: "(api.operation.id==='searchTerms')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/terms"
              title: "Search terms"
              tls-profile: "$(tls-profile-api)"
        - condition: "(api.operation.id==='getTermsSuggestionList')"
          execute:
          - proxy:
              target-url: "https://$(secure-gateway-destination-api)/terms-suggestion-list"
              title: "Get terms suggestion list"
              tls-profile: "$(tls-profile-api)"
  phase: "realized"
  properties:
    tls-profile-api:
      description: ""
      encoded: false
    secure-gateway-destination-api:
      description: ""
      encoded: false
    tls-profile-oidc:
      description: ""
      encoded: false
    secure-gateway-destination-oidc:
      description: ""
      encoded: false
  catalogs:
    INTCORRECTIVE:
      properties:
        tls-profile-api: "intcorrective"
        secure-gateway-destination-api: "xxx-01.yyy.appdomain.cloud:15201/trademark-goods-and-services"
        tls-profile-oidc: "intcorrective"
        secure-gateway-destination-oidc: "xxx-01.yyy.appdomain.cloud:15201/auth"
    INTADAPTIVE:
      properties:
        tls-profile-api: "intadaptive"
        secure-gateway-destination-api: "xxx-01.yyy.appdomain.cloud:15289/trademark-goods-and-services"
        tls-profile-oidc: "intadaptive"
        secure-gateway-destination-oidc: "xxx-01.yyy.appdomain.cloud:15289/auth"
    SANDBOX:
      properties:
        tls-profile-api: "sandbox"
        secure-gateway-destination-api: "xxx-03.yyy.appdomain.cloud:15393/trademark-goods-and-services"
        tls-profile-oidc: "test"
        secure-gateway-destination-oidc: "xxx-03.yyy.appdomain.cloud:15097/auth"
    TEST:
      properties:
        tls-profile-api: "test"
        secure-gateway-destination-api: "xxx-03.yyy.appdomain.cloud:15097/trademark-goods-and-services"
        tls-profile-oidc: "test"
        secure-gateway-destination-oidc: "xxx-03.yyy.appdomain.cloud:15097/auth"
    PREPROD:
      properties:
        tls-profile-api: "preprod"
        secure-gateway-destination-api: "xxx-03.yyy.appdomain.cloud:15396/trademark-goods-and-services"
        tls-profile-oidc: "preprod"
        secure-gateway-destination-oidc: "xxx-03.yyy.appdomain.cloud:15396/auth"
    PRODUCTION:
      properties:
        tls-profile-api: "production"
        secure-gateway-destination-api: "xxx-03.yyy.appdomain.cloud:15390/trademark-goods-and-services"
        tls-profile-oidc: ""
        secure-gateway-destination-oidc: "euipo.europa.eu/cas-server-webapp"
paths:
  /classification-translation:
    post:
      summary: "Get classification translations"
      description: "Gets the translations of a list of HDB terms"
      operationId: "getClassificationTranslations"
      tags:
      - "Classification"
      parameters:
      - name: "classificationToTranslate"
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/ClassificationTranslationRequest"
      responses:
        200:
          description: "Classification translations"
          schema:
            $ref: "#/definitions/ClassificationTranslation"
          examples:
            application/json:
              translations:
                es:
                - classNumber: 3
                  terms:
                  - "Preparaciones para blanquear"
                  - "Fragancias para uso personal"
                  - "Betunes y cremas para el calzado"
                  - "Limpiadores de cromo"
                fr:
                - classNumber: 3
                  terms:
                  - "Préparations décolorantes"
                  - "Parfums à usage personnel"
                  - "Cirages et crèmes pour chaussures"
                  - "Nettoyants pour chrome"
  /classification-validation:
    post:
      summary: "Validate classification"
      description: "It checks every term against the harmonised DB and against validation\
        \ rules for invalid characters, syntax, max term length, duplicate terms and\
        \ forbidden terms"
      operationId: "validateClassification"
      tags:
      - "Classification"
      parameters:
      - name: "termsToCheck"
        description: "List of terms to check"
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/ClassificationValidationRequest"
      responses:
        200:
          description: "Validated terms"
          schema:
            $ref: "#/definitions/ClassificationValidationResult"
          examples:
            application/json:
              sourceLanguage: "en"
              goodsAndServices:
              - classNumber: 3
                terms:
                - text: "Bleaching preparations"
                  harmonized: true
                  conceptId: "0035861"
                - text: "C@ts and dog$"
                  harmonized: false
                  errors:
                  - type: "/problems/invalid-character"
                    title: "Invalid character"
                    detail: "Invalid character '@' found at position 2"
                    invalidChar: "@"
                    position: 1
                  - type: "/problems/invalid-character"
                    title: "Invalid character"
                    detail: "Invalid character '$' found at position 12"
                    invalidChar: "@"
                    position: 12
                - text: "Fragrances for personal use"
                  harmonized: true
                  conceptId: "0016241"
                - text: "Shoe polish and creams"
                  harmonized: true
                  conceptId: "0070820"
                - text: "Chrome cleaners"
                  harmonized: true
                  conceptId: "0009386"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/UnexpectedError"
  /taxonomy:
    get:
      tags:
      - "Taxonomy"
      operationId: "getTaxonomy"
      summary: "Get taxonomy"
      description: "Gets taxonomy tree"
      parameters:
      - $ref: "#/parameters/Language"
      responses:
        200:
          description: "Taxonomy tree"
          schema:
            $ref: "#/definitions/TaxonomyItem"
          examples:
            application/json:
              text: "Classification"
              conceptId: "0"
              level: 0
              items:
              - text: "Goods"
                conceptId: "20000"
                level: 0
                items:
                - text: "Class 1"
                  conceptId: "1529135"
                  level: 1
                  classNumber: 1
                  items:
                  - text: "Adhesives for use in industry"
                    conceptId: "1528474"
                    level: 2
                    classNumber: 1
                  - text: "Chemical and organic compositions for use in the manufacture\
                      \ of food and beverages"
                    conceptId: "1528490"
                    level: 2
                    classNumber: 1
                  - text: "Chemical preparations and materials for film photography\
                      \ and printing"
                    conceptId: "1528472"
                    level: 2
                    classNumber: 1
                    items:
                    - text: "Photographic film not exposed"
                      conceptId: "1528485"
                      level: 3
                      classNumber: 1
                    - text: "Sensitised paper"
                      conceptId: "1528484"
                      level: 3
                      classNumber: 1
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/UnexpectedError"
  /classHeadings:
    get:
      tags:
      - "Classes"
      operationId: "getClassHeadings"
      summary: "Get class headings"
      description: "Gets the heading of the Nice classes"
      parameters:
      - $ref: "#/parameters/Language"
      responses:
        200:
          description: "Headings of the Nice classes in the indicated language"
          schema:
            $ref: "#/definitions/ClassHeadings"
          examples:
            application/json:
              headings:
              - classNumber: 1
                heading: "Chemische Erzeugnisse für gewerbliche, wissenschaftliche,\
                  \ fotografische, land-, garten- und forstwirtschaftliche Zwecke;\
                  \ Kunstharze im Rohzustand, Kunststoffe im Rohzustand; Feuerlösch-\
                  \ und Brandschutzmittel; Mittel zum Härten und Löten von Metallen;\
                  \ Mittel zum Gerben von Tierhäuten; Klebstoffe für gewerbliche Zwecke;\
                  \ Kitte und andere Spachtelmassen; Kompost, Düngemittel, Dünger;\
                  \ Biologische Mittel für gewerbliche und wissenschaftliche Zwecke"
              - classNumber: 2
                heading: "Farben, Firnisse, Lacke; Rostschutzmittel, Holzkonservierungsmittel;\
                  \ Färbemittel, Farbstoffe; Tinten zum Drucken, Markieren und Gravieren;\
                  \ Naturharze im Rohzustand; Blattmetalle und Metalle in Pulverform\
                  \ für Mal-, Dekorations- und Druckzwecke sowie für künstlerische\
                  \ Arbeiten"
              - classNumber: 3
                heading: "Nicht medizinische Kosmetika und Mittel für Körper- und\
                  \ Schönheitspflege; Nicht medizinische Zahnputzmittel; Parfümeriewaren,\
                  \ ätherische Öle; Wasch- und Bleichmittel; Putz-, Polier-, Fettentfernungs-\
                  \ und Schleifmittel"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/UnexpectedError"
  /terms:
    get:
      tags:
      - "Terms"
      operationId: "searchTerms"
      summary: "Search terms"
      description: "Search HDB terms that match with the parameters"
      parameters:
      - $ref: "#/parameters/Language"
      - $ref: "#/parameters/ClassNumber"
      - $ref: "#/parameters/TermText"
      - $ref: "#/parameters/ParentConceptId"
      - $ref: "#/parameters/PageNumber"
      - $ref: "#/parameters/PageSize"
      responses:
        200:
          description: "List of HDB that contains the text"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/TermsResource"
            example:
              terms:
              - text: "Accesorios para excavadoras"
                classNumber: 7
                conceptId: "10944858"
                taxonomyParentId: "1656656"
              - text: "Acoplamientos para bulldozers"
                classNumber: 7
                conceptId: "10965951"
                taxonomyParentId: "1656657"
              - text: "Máquinas y aparatos agrícolas, de jardinería y forestales"
                classNumber: 7
                conceptId: "1528574"
              totalElements: 3
              totalPages: 1
              size: 10
              page: 0
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/UnexpectedError"
  /terms-suggestion-list:
    post:
      tags:
      - "Terms"
      operationId: "getTermsSuggestionList"
      summary: "Get terms suggestion list"
      description: "Gets a list of suggested terms"
      parameters:
      - name: "listOfTexts"
        description: "List of texts to find term suggestions"
        required: true
        in: "body"
        schema:
          $ref: "#/definitions/TermsSuggestionRequest"
      responses:
        200:
          description: "List of suggestions"
          schema:
            $ref: "#/definitions/TermsSuggestion"
          examples:
            application/json:
              suggestions:
              - sourceTerm: "Batas guardapolvo"
                suggestedTerms:
                - text: "Batas de laboratorio"
                  classNumber: 25
                  conceptId: "0043263"
                - text: "Batas [guardapolvos]"
                  classNumber: 25
                  conceptId: "0060726"
        401:
          $ref: "#/responses/UnauthorizedError"
        default:
          $ref: "#/responses/UnexpectedError"
tags:
- name: "Classification"
- name: "Taxonomy"
- name: "Classes"
- name: "Terms"
parameters:
  Language:
    name: "language"
    in: "query"
    required: true
    type: "string"
  ClassNumber:
    name: "classNumber"
    in: "query"
    description: "Nice class number"
    required: false
    type: "integer"
  TermText:
    name: "termText"
    in: "query"
    description: "Text to search terms"
    required: false
    type: "string"
  ParentConceptId:
    name: "parentConceptId"
    in: "query"
    description: "Concept identifier of the parent node in taxonomy"
    required: false
    type: "string"
  PageNumber:
    name: "page"
    in: "query"
    description: "Number of the page when paginating"
    required: false
    type: "integer"
    default: 0
  PageSize:
    name: "size"
    description: "Size of the page when paginating"
    required: false
    in: "query"
    type: "integer"
    default: 10
    maximum: 100
responses:
  UnauthorizedError:
    description: "User is not authorized to perform this action"
  UnexpectedError:
    description: "Unexpected error"
    schema:
      $ref: "#/definitions/Problem"
    examples:
      application/json:
        title: "Unexpected Error"
        detail: "Error detail"
        status: 500
definitions:
  ClassificationTranslationRequest:
    type: "object"
    properties:
      sourceLanguage:
        $ref: "#/definitions/EUOfficialLanguage"
      languagesToTranslate:
        type: "array"
        items:
          $ref: "#/definitions/EUOfficialLanguage"
      goodsAndServices:
        type: "array"
        items:
          $ref: "#/definitions/GoodsAndServicesEntry"
    required:
    - "sourceLanguage"
    - "goodsAndServices"
    example:
      sourceLanguage: "en"
      languagesToTranslate:
      - "es"
      - "fr"
      goodsAndServices:
      - classNumber: 3
        terms:
        - "Bleaching preparations"
        - "Fragrances for personal use"
        - "Shoe polish and creams"
        - "Chrome cleaners"
  EUOfficialLanguage:
    type: "string"
    enum:
    - "bg"
    - "cs"
    - "da"
    - "de"
    - "el"
    - "en"
    - "es"
    - "et"
    - "fi"
    - "fr"
    - "hr"
    - "hu"
    - "it"
    - "lt"
    - "lv"
    - "mt"
    - "nl"
    - "pl"
    - "pt"
    - "ro"
    - "sk"
    - "sl"
    - "sv"
  TaxonomyItem:
    type: "object"
    properties:
      text:
        $ref: "#/definitions/TermText"
      conceptId:
        $ref: "#/definitions/ConceptId"
      level:
        type: "integer"
      classNumber:
        $ref: "#/definitions/ClassNumber"
      items:
        type: "array"
        items:
          $ref: "#/definitions/TaxonomyItem"
    required:
    - "text"
    - "conceptId"
    - "level"
  GoodsAndServicesEntry:
    type: "object"
    properties:
      classNumber:
        $ref: "#/definitions/ClassNumber"
      terms:
        type: "array"
        items:
          $ref: "#/definitions/TermText"
    required:
    - "classNumber"
    - "terms"
  ClassNumber:
    type: "integer"
  TermText:
    type: "string"
  ConceptId:
    type: "string"
  ClassificationTranslation:
    type: "object"
    properties:
      translations:
        type: "object"
        additionalProperties:
          type: "array"
          items:
            $ref: "#/definitions/GoodsAndServicesEntry"
  ClassificationValidationRequest:
    type: "object"
    properties:
      sourceLanguage:
        $ref: "#/definitions/EUOfficialLanguage"
      goodsAndServices:
        type: "array"
        items:
          $ref: "#/definitions/GoodsAndServicesEntry"
    required:
    - "sourceLanguage"
    - "goodsAndServices"
    example:
      sourceLanguage: "en"
      goodsAndServices:
      - classNumber: 3
        terms:
        - "Bleaching preparations"
        - "C@ts and dog$"
        - "Fragrances for personal use"
        - "Shoe polish and creams"
        - "Chrome cleaners"
  ClassificationValidationResult:
    type: "object"
    properties:
      sourceLanguage:
        $ref: "#/definitions/EUOfficialLanguage"
      goodsAndServices:
        type: "array"
        items:
          $ref: "#/definitions/GoodsAndServicesValidationResult"
    required:
    - "sourceLanguage"
    - "goodsAndServices"
  GoodsAndServicesValidationResult:
    type: "object"
    properties:
      classNumber:
        $ref: "#/definitions/ClassNumber"
      terms:
        type: "array"
        items:
          $ref: "#/definitions/TermValidationResult"
    required:
    - "classNumber"
    - "terms"
  TermValidationResult:
    type: "object"
    properties:
      text:
        $ref: "#/definitions/TermText"
      harmonized:
        type: "boolean"
      conceptId:
        $ref: "#/definitions/ConceptId"
      errors:
        type: "array"
        items:
          $ref: "#/definitions/ValidationError"
        example:
        - type: "/problems/invalid-character"
          title: "Invalid character"
          detail: "Invalid character '@' found at position 2"
          invalidChar: "@"
          position: 2
        - type: "/problems/max-length-exceeded"
          title: "Max length exceeded"
          detail: "Term has a length of 14 when maximum length allowed is 5"
          maxLength: 5
          length: 14
        - type: "/problems/invalid-syntax"
          title: "Invalid syntax"
          detail: "Bracket '[' has not been properly opened/closed"
          text: "["
        description: "list of validation errors"
      warnings:
        type: "array"
        items:
          $ref: "#/definitions/DuplicatedTermProblem"
        description: "list of validation warnings"
    required:
    - "text"
    - "harmonized"
  TermsSuggestionRequest:
    type: "object"
    properties:
      language:
        $ref: "#/definitions/EUOfficialLanguage"
      texts:
        type: "array"
        items:
          type: "string"
    required:
    - "language"
    - "texts"
    example:
      language: "es"
      texts:
      - "Batas guardapolvo"
  TermsSuggestion:
    type: "object"
    properties:
      suggestions:
        type: "array"
        items:
          $ref: "#/definitions/TermSuggested"
  TermSuggested:
    type: "object"
    properties:
      sourceTerm:
        type: "string"
      suggestedTerms:
        type: "array"
        items:
          $ref: "#/definitions/Term"
  ClassHeadings:
    type: "object"
    properties:
      headings:
        type: "array"
        items:
          $ref: "#/definitions/ClassInfo"
  ClassInfo:
    type: "object"
    properties:
      classNumber:
        $ref: "#/definitions/ClassNumber"
      heading:
        type: "string"
    required:
    - "classNumber"
  Term:
    type: "object"
    properties:
      text:
        $ref: "#/definitions/TermText"
      classNumber:
        $ref: "#/definitions/ClassNumber"
      conceptId:
        $ref: "#/definitions/ConceptId"
      taxonomyParentId:
        $ref: "#/definitions/ConceptId"
    required:
    - "text"
    - "classNumber"
    - "conceptId"
  TermsResource:
    type: "object"
    properties:
      terms:
        type: "array"
        items:
          $ref: "#/definitions/Term"
      totalElements:
        type: "integer"
      totalPages:
        type: "integer"
      size:
        type: "integer"
      page:
        type: "integer"
    required:
    - "terms"
    - "totalElements"
    - "totalPages"
    - "size"
    - "page"
  DuplicatedTermProblem:
    allOf:
    - $ref: "#/definitions/Problem"
    - type: "object"
      properties:
        type:
          type: "string"
          enum:
          - "/problems/duplicated-term"
      required:
      - "type"
    example:
      type: "/problems/duplicated-term"
      title: "Duplicated term"
      detail: "Same term appears more than once within this class"
  ValidationError:
    allOf:
    - $ref: "#/definitions/Problem"
    - type: "object"
      properties:
        invalidChar:
          type: "string"
          maxLength: 1
          description: "Invalid character. Only available for type: invalid-character"
        position:
          type: "integer"
          description: "Position of invalid character. Only available for type: invalid-character"
        maxLength:
          type: "integer"
          description: "Maximum length allowed. Only available for type: max-length-exceeded"
        length:
          type: "integer"
          description: "Actual length. Only available for type: max-length-exceeded"
        text:
          type: "string"
          description: "Text string with incorrect syntax. Only available for type:\
            \ invalid-syntax"
        matchedText:
          type: "string"
          description: "Text with forbidden term. Only available for type: forbidden-term"
        startPosition:
          type: "integer"
          description: "Start position of the text with forbidden term. Only available\
            \ for type: forbidden-term"
        endPosition:
          type: "integer"
          description: "End position of the text with forbidden term. Only available\
            \ for type: forbidden-term"
  Problem:
    type: "object"
    properties:
      type:
        type: "string"
        format: "uri-reference"
        description: "A URI reference that uniquely identifies the problem type only\
          \ in the context of the provided API. Opposed to the specification in RFC-7807,\
          \ it is neither recommended to be dereferencable and point to a human-readable\
          \ documentation nor globally unique for the problem type.\n"
        default: "about:blank"
        example: "/problem/connection-error"
      title:
        type: "string"
        description: "A short summary of the problem type. Written in English and\
          \ readable for engineers, usually not suited for non technical stakeholders\
          \ and not localized.\n"
        example: "Service Unavailable"
      status:
        type: "integer"
        format: "int32"
        description: "The HTTP status code generated by the origin server for this\
          \ occurrence of the problem.\n"
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
        example: 503
      detail:
        type: "string"
        description: "A human readable explanation specific to this occurrence of\
          \ the problem that is helpful to locate the problem and give advice on how\
          \ to proceed. Written in English and readable for engineers, usually not\
          \ suited for non technical stakeholders and not localized.\n"
        example: "Connection to database timed out"
      instance:
        type: "string"
        format: "uri-reference"
        description: "A URI reference that identifies the specific occurrence of the\
          \ problem, e.g. by adding a fragment identifier or sub-path to the problem\
          \ type. May be used to locate the root of this problem in the source code.\n"
        example: "/problem/connection-error#token-info-read-timed-out"
    required:
    - "title"
    - "detail"
